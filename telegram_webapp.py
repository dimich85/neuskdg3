from flask import Flask, render_template, request, jsonify
import hmac
import hashlib
import json
from urllib.parse import parse_qsl
import asyncio
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

app = Flask(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "6933094335:AAGT_DNq1EUSzb9PlWwjFeulF4NIT_tGbrk"

# URL –≤–∞—à–µ–≥–æ WebApp (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok)
# –ù–∞–ø—Ä–∏–º–µ—Ä: "https://abc123.ngrok.io" –∏–ª–∏ "http://localhost:5000" –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

def validate_telegram_data(init_data: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram WebApp"""
    try:
        parsed_data = dict(parse_qsl(init_data))

        # –ü–æ–ª—É—á–∞–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        received_hash = parsed_data.pop('hash', None)
        if not received_hash:
            return None

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])

        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            key=b"WebAppData",
            msg=BOT_TOKEN.encode(),
            digestmod=hashlib.sha256
        ).digest()

        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(
            key=secret_key,
            msg=data_check_string.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if calculated_hash != received_hash:
            return None

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user' in parsed_data:
            parsed_data['user'] = json.loads(parsed_data['user'])

        return parsed_data
    except Exception as e:
        print(f"Validation error: {e}")
        return None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/auth', methods=['POST'])
def authenticate():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.json
    init_data = data.get('initData')

    if not init_data:
        return jsonify({'error': 'No init data provided'}), 400

    validated_data = validate_telegram_data(init_data)

    if not validated_data:
        return jsonify({'error': 'Invalid authentication data'}), 401

    user_data = validated_data.get('user', {})

    return jsonify({
        'success': True,
        'user': {
            'id': user_data.get('id'),
            'first_name': user_data.get('first_name'),
            'last_name': user_data.get('last_name'),
            'username': user_data.get('username'),
            'language_code': user_data.get('language_code'),
            'is_premium': user_data.get('is_premium', False),
            'photo_url': user_data.get('photo_url')
        }
    })


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEB_APP_URL)
                )
            ]
        ]
    )

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n"
        f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –ø—Ä–æ—Ñ–∏–ª—å:",
        reply_markup=keyboard
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –û—Ç–∫—Ä—ã—Ç—å WebApp\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    )


@dp.message(Command("app"))
async def cmd_app(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEB_APP_URL)
                )
            ]
        ]
    )

    await message.answer(
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


@dp.message()
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    )


# ========== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ ==========

async def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä"""
    print("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    app.run(debug=False, host='0.0.0.0', port=5000, use_reloader=False)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç Flask –∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("=" * 50)
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram WebApp")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(start_bot())


if __name__ == '__main__':
    main()